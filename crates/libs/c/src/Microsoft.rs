// Bindings generated by `windows-bindgen` 0.57.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod ServiceFabric {
    pub mod ReliableCollectionRuntime {
        #[inline]
        pub unsafe fn Buffer_Release(handle: *mut core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Buffer_Release(handle: *mut core::ffi::c_void);
            }
            Buffer_Release(handle)
        }
        #[inline]
        pub unsafe fn CancellationTokenSource_Cancel(cts: *mut core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn CancellationTokenSource_Cancel(cts: *mut core::ffi::c_void);
            }
            CancellationTokenSource_Cancel(cts)
        }
        #[inline]
        pub unsafe fn CancellationTokenSource_Release(cts: *mut core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn CancellationTokenSource_Release(cts: *mut core::ffi::c_void);
            }
            CancellationTokenSource_Release(cts)
        }
        #[inline]
        pub unsafe fn ConcurrentQueue_EnqueueAsync(
            concurrentqueue: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            objecthandle: usize,
            bytes: *const core::ffi::c_void,
            byteslength: u32,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ConcurrentQueue_EnqueueAsync(
                    concurrentqueue: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    objecthandle: usize,
                    bytes: *const core::ffi::c_void,
                    byteslength: u32,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            ConcurrentQueue_EnqueueAsync(
                concurrentqueue,
                txn,
                objecthandle,
                bytes,
                byteslength,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn ConcurrentQueue_GetCount(
            concurrentqueue: *const core::ffi::c_void,
        ) -> windows_core::Result<i64> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ConcurrentQueue_GetCount(
                    concurrentqueue: *const core::ffi::c_void,
                    count: *mut i64,
                ) -> windows_core::HRESULT;
            }
            let mut result__ = core::mem::zeroed();
            ConcurrentQueue_GetCount(concurrentqueue, &mut result__).map(|| result__)
        }
        #[inline]
        pub unsafe fn ConcurrentQueue_TryDequeueAsync(
            concurrentqueue: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            timeout: i64,
            objecthandle: *mut usize,
            value: *mut Buffer,
            cts: *mut *mut core::ffi::c_void,
            succeeded: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyTryDequeueAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ConcurrentQueue_TryDequeueAsync(
                    concurrentqueue: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    timeout: i64,
                    objecthandle: *mut usize,
                    value: *mut Buffer,
                    cts: *mut *mut core::ffi::c_void,
                    succeeded: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyTryDequeueAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            ConcurrentQueue_TryDequeueAsync(
                concurrentqueue,
                txn,
                timeout,
                objecthandle,
                value,
                cts,
                succeeded,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn GetTxnReplicator<P0, P1, P2>(
            replicaid: i64,
            statefulservicepartition: *const core::ffi::c_void,
            datalosshandler: *const core::ffi::c_void,
            replicatorsettings: *const TxnReplicator_Settings,
            configpackagename: P0,
            replicatorsettingssectionname: P1,
            replicatorsecuritysectionname: P2,
            primaryreplicator: *mut *mut core::ffi::c_void,
            txnreplicatorhandle: *mut *mut core::ffi::c_void,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
            P2: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn GetTxnReplicator(
                    replicaid: i64,
                    statefulservicepartition: *const core::ffi::c_void,
                    datalosshandler: *const core::ffi::c_void,
                    replicatorsettings: *const TxnReplicator_Settings,
                    configpackagename: windows_core::PCWSTR,
                    replicatorsettingssectionname: windows_core::PCWSTR,
                    replicatorsecuritysectionname: windows_core::PCWSTR,
                    primaryreplicator: *mut *mut core::ffi::c_void,
                    txnreplicatorhandle: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            GetTxnReplicator(
                replicaid,
                statefulservicepartition,
                datalosshandler,
                replicatorsettings,
                configpackagename.param().abi(),
                replicatorsettingssectionname.param().abi(),
                replicatorsecuritysectionname.param().abi(),
                primaryreplicator,
                txnreplicatorhandle,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn PrimaryReplicator_UpdateReplicatorSettings(
            primaryreplicator: *const core::ffi::c_void,
            replicatorsettings: *const TxnReplicator_Settings,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn PrimaryReplicator_UpdateReplicatorSettings(
                    primaryreplicator: *const core::ffi::c_void,
                    replicatorsettings: *const TxnReplicator_Settings,
                ) -> windows_core::HRESULT;
            }
            PrimaryReplicator_UpdateReplicatorSettings(primaryreplicator, replicatorsettings).ok()
        }
        #[inline]
        pub unsafe fn ReliableCollectionRuntime_Initialize(
            apiversion: u16,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ReliableCollectionRuntime_Initialize(
                    apiversion: u16,
                ) -> windows_core::HRESULT;
            }
            ReliableCollectionRuntime_Initialize(apiversion).ok()
        }
        #[inline]
        pub unsafe fn ReliableCollectionRuntime_Initialize2<P0>(
            apiversion: u16,
            standalonemode: P0,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ReliableCollectionRuntime_Initialize2(
                    apiversion: u16,
                    standalonemode: windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            ReliableCollectionRuntime_Initialize2(apiversion, standalonemode.param().abi()).ok()
        }
        #[inline]
        pub unsafe fn ReliableCollectionRuntime_StartTraceSessions() -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn ReliableCollectionRuntime_StartTraceSessions() -> windows_core::HRESULT;
            }
            ReliableCollectionRuntime_StartTraceSessions().ok()
        }
        #[inline]
        pub unsafe fn StateProviderEnumerator_AddRef(enumerator: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProviderEnumerator_AddRef(enumerator: *const core::ffi::c_void);
            }
            StateProviderEnumerator_AddRef(enumerator)
        }
        #[inline]
        pub unsafe fn StateProviderEnumerator_MoveNext(
            enumerator: *const core::ffi::c_void,
            advanced: *mut windows::Win32::Foundation::BOOL,
            providername: *mut windows_core::PCWSTR,
            provider: *mut *mut core::ffi::c_void,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProviderEnumerator_MoveNext(
                    enumerator: *const core::ffi::c_void,
                    advanced: *mut windows::Win32::Foundation::BOOL,
                    providername: *mut windows_core::PCWSTR,
                    provider: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            StateProviderEnumerator_MoveNext(enumerator, advanced, providername, provider).ok()
        }
        #[inline]
        pub unsafe fn StateProviderEnumerator_Release(enumerator: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProviderEnumerator_Release(enumerator: *const core::ffi::c_void);
            }
            StateProviderEnumerator_Release(enumerator)
        }
        #[inline]
        pub unsafe fn StateProvider_AddRef(stateproviderhandle: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProvider_AddRef(stateproviderhandle: *const core::ffi::c_void);
            }
            StateProvider_AddRef(stateproviderhandle)
        }
        #[inline]
        pub unsafe fn StateProvider_GetInfo<P0>(
            stateprovider: *const core::ffi::c_void,
            lang: P0,
        ) -> windows_core::Result<StateProvider_Info>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProvider_GetInfo(
                    stateprovider: *const core::ffi::c_void,
                    lang: windows_core::PCWSTR,
                    stateproviderinfo: *mut StateProvider_Info,
                ) -> windows_core::HRESULT;
            }
            let mut result__ = core::mem::zeroed();
            StateProvider_GetInfo(stateprovider, lang.param().abi(), &mut result__).map(|| result__)
        }
        #[inline]
        pub unsafe fn StateProvider_Release(stateproviderhandle: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StateProvider_Release(stateproviderhandle: *const core::ffi::c_void);
            }
            StateProvider_Release(stateproviderhandle)
        }
        #[inline]
        pub unsafe fn StoreKeyEnumerator_AddRef(enumerator: *mut core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StoreKeyEnumerator_AddRef(enumerator: *mut core::ffi::c_void);
            }
            StoreKeyEnumerator_AddRef(enumerator)
        }
        #[inline]
        pub unsafe fn StoreKeyEnumerator_MoveNext(
            enumerator: *const core::ffi::c_void,
            advanced: *mut windows::Win32::Foundation::BOOL,
            key: *mut windows_core::PCWSTR,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StoreKeyEnumerator_MoveNext(
                    enumerator: *const core::ffi::c_void,
                    advanced: *mut windows::Win32::Foundation::BOOL,
                    key: *mut windows_core::PCWSTR,
                ) -> windows_core::HRESULT;
            }
            StoreKeyEnumerator_MoveNext(enumerator, advanced, key).ok()
        }
        #[inline]
        pub unsafe fn StoreKeyEnumerator_Release(enumerator: *mut core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StoreKeyEnumerator_Release(enumerator: *mut core::ffi::c_void);
            }
            StoreKeyEnumerator_Release(enumerator)
        }
        #[inline]
        pub unsafe fn StoreKeyValueEnumerator_MoveNextAsync(
            enumerator: *const core::ffi::c_void,
            cts: *mut *mut core::ffi::c_void,
            advanced: *mut windows::Win32::Foundation::BOOL,
            key: *mut windows_core::PCWSTR,
            objecthandle: *mut usize,
            value: *mut Buffer,
            versionsequencenumber: *mut i64,
            callback: fnNotifyStoreKeyValueEnumeratorMoveNextAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StoreKeyValueEnumerator_MoveNextAsync(
                    enumerator: *const core::ffi::c_void,
                    cts: *mut *mut core::ffi::c_void,
                    advanced: *mut windows::Win32::Foundation::BOOL,
                    key: *mut windows_core::PCWSTR,
                    objecthandle: *mut usize,
                    value: *mut Buffer,
                    versionsequencenumber: *mut i64,
                    callback: fnNotifyStoreKeyValueEnumeratorMoveNextAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            StoreKeyValueEnumerator_MoveNextAsync(
                enumerator,
                cts,
                advanced,
                key,
                objecthandle,
                value,
                versionsequencenumber,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn StoreKeyValueEnumerator_Release(enumerator: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn StoreKeyValueEnumerator_Release(enumerator: *const core::ffi::c_void);
            }
            StoreKeyValueEnumerator_Release(enumerator)
        }
        #[inline]
        pub unsafe fn Store_AddAsync<P0>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            key: P0,
            objecthandle: usize,
            bytes: *const core::ffi::c_void,
            byteslength: u32,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_AddAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    key: windows_core::PCWSTR,
                    objecthandle: usize,
                    bytes: *const core::ffi::c_void,
                    byteslength: u32,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_AddAsync(
                store,
                txn,
                key.param().abi(),
                objecthandle,
                bytes,
                byteslength,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_AddRef(storehandle: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_AddRef(storehandle: *const core::ffi::c_void);
            }
            Store_AddRef(storehandle)
        }
        #[inline]
        pub unsafe fn Store_ConditionalGetAsync<P0>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            key: P0,
            timeout: i64,
            lockmode: Store_LockMode,
            objecthandle: *mut usize,
            value: *mut Buffer,
            versionsequencenumber: *mut i64,
            cts: *mut *mut core::ffi::c_void,
            found: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyGetAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_ConditionalGetAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    key: windows_core::PCWSTR,
                    timeout: i64,
                    lockmode: Store_LockMode,
                    objecthandle: *mut usize,
                    value: *mut Buffer,
                    versionsequencenumber: *mut i64,
                    cts: *mut *mut core::ffi::c_void,
                    found: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyGetAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_ConditionalGetAsync(
                store,
                txn,
                key.param().abi(),
                timeout,
                lockmode,
                objecthandle,
                value,
                versionsequencenumber,
                cts,
                found,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_ConditionalRemoveAsync<P0>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            key: P0,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            conditionalversion: i64,
            removed: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyRemoveAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_ConditionalRemoveAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    key: windows_core::PCWSTR,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    conditionalversion: i64,
                    removed: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyRemoveAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_ConditionalRemoveAsync(
                store,
                txn,
                key.param().abi(),
                timeout,
                cts,
                conditionalversion,
                removed,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_ConditionalUpdateAsync<P0>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            key: P0,
            objecthandle: usize,
            bytes: *const core::ffi::c_void,
            byteslength: u32,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            conditionalversion: i64,
            updated: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyUpdateAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_ConditionalUpdateAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    key: windows_core::PCWSTR,
                    objecthandle: usize,
                    bytes: *const core::ffi::c_void,
                    byteslength: u32,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    conditionalversion: i64,
                    updated: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyUpdateAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_ConditionalUpdateAsync(
                store,
                txn,
                key.param().abi(),
                objecthandle,
                bytes,
                byteslength,
                timeout,
                cts,
                conditionalversion,
                updated,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_ContainsKeyAsync<P0>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            key: P0,
            timeout: i64,
            lockmode: Store_LockMode,
            cts: *mut *mut core::ffi::c_void,
            found: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyContainsKeyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_ContainsKeyAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    key: windows_core::PCWSTR,
                    timeout: i64,
                    lockmode: Store_LockMode,
                    cts: *mut *mut core::ffi::c_void,
                    found: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyContainsKeyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_ContainsKeyAsync(
                store,
                txn,
                key.param().abi(),
                timeout,
                lockmode,
                cts,
                found,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_CreateEnumeratorAsync(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            enumerator: *mut *mut core::ffi::c_void,
            callback: fnNotifyCreateEnumeratorAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_CreateEnumeratorAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    enumerator: *mut *mut core::ffi::c_void,
                    callback: fnNotifyCreateEnumeratorAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_CreateEnumeratorAsync(store, txn, enumerator, callback, ctx, synchronouscomplete)
                .ok()
        }
        #[inline]
        pub unsafe fn Store_CreateKeyEnumeratorAsync<P0, P1>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            firstkey: P0,
            lastkey: P1,
            enumerator: *mut *mut core::ffi::c_void,
            callback: fnNotifyCreateKeyEnumeratorAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_CreateKeyEnumeratorAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    firstkey: windows_core::PCWSTR,
                    lastkey: windows_core::PCWSTR,
                    enumerator: *mut *mut core::ffi::c_void,
                    callback: fnNotifyCreateKeyEnumeratorAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_CreateKeyEnumeratorAsync(
                store,
                txn,
                firstkey.param().abi(),
                lastkey.param().abi(),
                enumerator,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_CreateRangedEnumeratorAsync<P0, P1>(
            store: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            firstkey: P0,
            lastkey: P1,
            enumerator: *mut *mut core::ffi::c_void,
            callback: fnNotifyCreateEnumeratorAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_CreateRangedEnumeratorAsync(
                    store: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    firstkey: windows_core::PCWSTR,
                    lastkey: windows_core::PCWSTR,
                    enumerator: *mut *mut core::ffi::c_void,
                    callback: fnNotifyCreateEnumeratorAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Store_CreateRangedEnumeratorAsync(
                store,
                txn,
                firstkey.param().abi(),
                lastkey.param().abi(),
                enumerator,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Store_GetCount(store: *const core::ffi::c_void) -> windows_core::Result<i64> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_GetCount(
                    store: *const core::ffi::c_void,
                    count: *mut i64,
                ) -> windows_core::HRESULT;
            }
            let mut result__ = core::mem::zeroed();
            Store_GetCount(store, &mut result__).map(|| result__)
        }
        #[inline]
        pub unsafe fn Store_Release(storehandle: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_Release(storehandle: *const core::ffi::c_void);
            }
            Store_Release(storehandle)
        }
        #[inline]
        pub unsafe fn Store_SetNotifyStoreChangeCallback(
            stateprovider: *const core::ffi::c_void,
            callback: fnNotifyStoreChangeCallback,
            cleanupcallback: fnCleanupContextCallback,
            ctx: *const core::ffi::c_void,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_SetNotifyStoreChangeCallback(
                    stateprovider: *const core::ffi::c_void,
                    callback: fnNotifyStoreChangeCallback,
                    cleanupcallback: fnCleanupContextCallback,
                    ctx: *const core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            Store_SetNotifyStoreChangeCallback(stateprovider, callback, cleanupcallback, ctx).ok()
        }
        #[inline]
        pub unsafe fn Store_SetNotifyStoreChangeCallbackMask(
            stateproviderhandle: *const core::ffi::c_void,
            mask: NotifyStoreChangeCallbackMask,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Store_SetNotifyStoreChangeCallbackMask(
                    stateproviderhandle: *const core::ffi::c_void,
                    mask: NotifyStoreChangeCallbackMask,
                ) -> windows_core::HRESULT;
            }
            Store_SetNotifyStoreChangeCallbackMask(stateproviderhandle, mask).ok()
        }
        #[inline]
        pub unsafe fn Test_UseEnv<P0>(enable: P0)
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Test_UseEnv(enable: windows::Win32::Foundation::BOOL);
            }
            Test_UseEnv(enable.param().abi())
        }
        #[inline]
        pub unsafe fn Transaction_Abort(txn: *const core::ffi::c_void) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_Abort(txn: *const core::ffi::c_void) -> windows_core::HRESULT;
            }
            Transaction_Abort(txn).ok()
        }
        #[inline]
        pub unsafe fn Transaction_AddRef(txn: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_AddRef(txn: *const core::ffi::c_void);
            }
            Transaction_AddRef(txn)
        }
        #[inline]
        pub unsafe fn Transaction_CommitAsync(
            txn: *const core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
        ) -> windows_core::Result<windows::Win32::Foundation::BOOL> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_CommitAsync(
                    txn: *const core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            let mut result__ = core::mem::zeroed();
            Transaction_CommitAsync(txn, callback, ctx, &mut result__).map(|| result__)
        }
        #[inline]
        pub unsafe fn Transaction_Dispose(txn: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_Dispose(txn: *const core::ffi::c_void);
            }
            Transaction_Dispose(txn)
        }
        #[inline]
        pub unsafe fn Transaction_GetInfo(
            txnhandle: *const core::ffi::c_void,
            info: *mut Transaction_Info,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_GetInfo(
                    txnhandle: *const core::ffi::c_void,
                    info: *mut Transaction_Info,
                ) -> windows_core::HRESULT;
            }
            Transaction_GetInfo(txnhandle, info).ok()
        }
        #[inline]
        pub unsafe fn Transaction_GetVisibilitySequenceNumberAsync(
            txnhandle: *const core::ffi::c_void,
            sequencenumber: *mut i64,
            callback: fnNotifyGetVisibilitySequenceNumberCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_GetVisibilitySequenceNumberAsync(
                    txnhandle: *const core::ffi::c_void,
                    sequencenumber: *mut i64,
                    callback: fnNotifyGetVisibilitySequenceNumberCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            Transaction_GetVisibilitySequenceNumberAsync(
                txnhandle,
                sequencenumber,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn Transaction_Release(txn: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn Transaction_Release(txn: *const core::ffi::c_void);
            }
            Transaction_Release(txn)
        }
        #[inline]
        pub unsafe fn TxnReplicator_AddStateProviderAsync<P0, P1>(
            txnreplicator: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            name: P0,
            lang: P1,
            stateproviderinfo: *const StateProvider_Info,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_AddStateProviderAsync(
                    txnreplicator: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    name: windows_core::PCWSTR,
                    lang: windows_core::PCWSTR,
                    stateproviderinfo: *const StateProvider_Info,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_AddStateProviderAsync(
                txnreplicator,
                txn,
                name.param().abi(),
                lang.param().abi(),
                stateproviderinfo,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_BackupAsync(
            txnreplicator: *const core::ffi::c_void,
            uploadasynccallback: fnUploadAsync,
            backupoption: Backup_Option,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_BackupAsync(
                    txnreplicator: *const core::ffi::c_void,
                    uploadasynccallback: fnUploadAsync,
                    backupoption: Backup_Option,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_BackupAsync(
                txnreplicator,
                uploadasynccallback,
                backupoption,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_BackupAsync2(
            txnreplicator: *const core::ffi::c_void,
            uploadasynccallback: fnUploadAsync2,
            backupoption: Backup_Option,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_BackupAsync2(
                    txnreplicator: *const core::ffi::c_void,
                    uploadasynccallback: fnUploadAsync2,
                    backupoption: Backup_Option,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_BackupAsync2(
                txnreplicator,
                uploadasynccallback,
                backupoption,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_CreateEnumerator<P0>(
            txnreplicator: *const core::ffi::c_void,
            parentsonly: P0,
            enumerator: *mut *mut core::ffi::c_void,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows::Win32::Foundation::BOOL>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_CreateEnumerator(
                    txnreplicator: *const core::ffi::c_void,
                    parentsonly: windows::Win32::Foundation::BOOL,
                    enumerator: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_CreateEnumerator(txnreplicator, parentsonly.param().abi(), enumerator)
                .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_CreateTransaction(
            txnreplicator: *const core::ffi::c_void,
            txn: *mut *mut core::ffi::c_void,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_CreateTransaction(
                    txnreplicator: *const core::ffi::c_void,
                    txn: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_CreateTransaction(txnreplicator, txn).ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_GetInfo(
            txnreplicator: *const core::ffi::c_void,
            info: *mut TxnReplicator_Info,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_GetInfo(
                    txnreplicator: *const core::ffi::c_void,
                    info: *mut TxnReplicator_Info,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_GetInfo(txnreplicator, info).ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_GetOrAddStateProviderAsync<P0, P1>(
            txnreplicator: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            name: P0,
            lang: P1,
            stateproviderinfo: *const StateProvider_Info,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            stateprovider: *mut *mut core::ffi::c_void,
            alreadyexist: *mut windows::Win32::Foundation::BOOL,
            callback: fnNotifyGetOrAddStateProviderAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
            P1: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_GetOrAddStateProviderAsync(
                    txnreplicator: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    name: windows_core::PCWSTR,
                    lang: windows_core::PCWSTR,
                    stateproviderinfo: *const StateProvider_Info,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    stateprovider: *mut *mut core::ffi::c_void,
                    alreadyexist: *mut windows::Win32::Foundation::BOOL,
                    callback: fnNotifyGetOrAddStateProviderAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_GetOrAddStateProviderAsync(
                txnreplicator,
                txn,
                name.param().abi(),
                lang.param().abi(),
                stateproviderinfo,
                timeout,
                cts,
                stateprovider,
                alreadyexist,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_GetStateProvider<P0>(
            txnreplicator: *const core::ffi::c_void,
            name: P0,
            store: *mut *mut core::ffi::c_void,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_GetStateProvider(
                    txnreplicator: *const core::ffi::c_void,
                    name: windows_core::PCWSTR,
                    store: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_GetStateProvider(txnreplicator, name.param().abi(), store).ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_Release(txnreplicator: *const core::ffi::c_void) {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_Release(txnreplicator: *const core::ffi::c_void);
            }
            TxnReplicator_Release(txnreplicator)
        }
        #[inline]
        pub unsafe fn TxnReplicator_RemoveStateProviderAsync<P0>(
            txnreplicator: *const core::ffi::c_void,
            txn: *const core::ffi::c_void,
            name: P0,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_RemoveStateProviderAsync(
                    txnreplicator: *const core::ffi::c_void,
                    txn: *const core::ffi::c_void,
                    name: windows_core::PCWSTR,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_RemoveStateProviderAsync(
                txnreplicator,
                txn,
                name.param().abi(),
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_RestoreAsync<P0>(
            txnreplicator: *const core::ffi::c_void,
            backupfolder: P0,
            restorepolicy: Restore_Policy,
            timeout: i64,
            cts: *mut *mut core::ffi::c_void,
            callback: fnNotifyAsyncCompletion,
            ctx: *const core::ffi::c_void,
            synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
        ) -> windows_core::Result<()>
        where
            P0: windows_core::Param<windows_core::PCWSTR>,
        {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_RestoreAsync(
                    txnreplicator: *const core::ffi::c_void,
                    backupfolder: windows_core::PCWSTR,
                    restorepolicy: Restore_Policy,
                    timeout: i64,
                    cts: *mut *mut core::ffi::c_void,
                    callback: fnNotifyAsyncCompletion,
                    ctx: *const core::ffi::c_void,
                    synchronouscomplete: *mut windows::Win32::Foundation::BOOL,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_RestoreAsync(
                txnreplicator,
                backupfolder.param().abi(),
                restorepolicy,
                timeout,
                cts,
                callback,
                ctx,
                synchronouscomplete,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_SetNotifyStateManagerChangeCallback(
            txnreplicator: *const core::ffi::c_void,
            callback: fnNotifyStateManagerChangeCallback,
            cleanupcallback: fnCleanupContextCallback,
            ctx: *const core::ffi::c_void,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_SetNotifyStateManagerChangeCallback(
                    txnreplicator: *const core::ffi::c_void,
                    callback: fnNotifyStateManagerChangeCallback,
                    cleanupcallback: fnCleanupContextCallback,
                    ctx: *const core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_SetNotifyStateManagerChangeCallback(
                txnreplicator,
                callback,
                cleanupcallback,
                ctx,
            )
            .ok()
        }
        #[inline]
        pub unsafe fn TxnReplicator_SetNotifyTransactionChangeCallback(
            txnreplicator: *const core::ffi::c_void,
            callback: fnNotifyTransactionChangeCallback,
            cleanupcallback: fnCleanupContextCallback,
            ctx: *const core::ffi::c_void,
        ) -> windows_core::Result<()> {
            #[link(name = "ReliableCollectionRuntime")]
            extern "system" {
                pub fn TxnReplicator_SetNotifyTransactionChangeCallback(
                    txnreplicator: *const core::ffi::c_void,
                    callback: fnNotifyTransactionChangeCallback,
                    cleanupcallback: fnCleanupContextCallback,
                    ctx: *const core::ffi::c_void,
                ) -> windows_core::HRESULT;
            }
            TxnReplicator_SetNotifyTransactionChangeCallback(
                txnreplicator,
                callback,
                cleanupcallback,
                ctx,
            )
            .ok()
        }
        windows_core::imp::define_interface!(
            IFabricDataLossHandler,
            IFabricDataLossHandler_Vtbl,
            0x0bba0a6a_8f00_41b5_9bbf_3ee30357028d
        );
        impl core::ops::Deref for IFabricDataLossHandler {
            type Target = windows_core::IUnknown;
            fn deref(&self) -> &Self::Target {
                unsafe { core::mem::transmute(self) }
            }
        }
        windows_core::imp::interface_hierarchy!(IFabricDataLossHandler, windows_core::IUnknown);
        impl IFabricDataLossHandler {
            pub unsafe fn BeginOnDataLoss(
                &self,
                callback: *mut core::ffi::c_void,
                context: *mut *mut core::ffi::c_void,
            ) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).BeginOnDataLoss)(
                    windows_core::Interface::as_raw(self),
                    callback,
                    context,
                )
                .ok()
            }
            pub unsafe fn EndOnDataLoss(
                &self,
                context: *mut core::ffi::c_void,
                isstatechanged: *mut u8,
            ) -> windows_core::Result<()> {
                (windows_core::Interface::vtable(self).EndOnDataLoss)(
                    windows_core::Interface::as_raw(self),
                    context,
                    isstatechanged,
                )
                .ok()
            }
        }
        #[repr(C)]
        pub struct IFabricDataLossHandler_Vtbl {
            pub base__: windows_core::IUnknown_Vtbl,
            pub BeginOnDataLoss: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut *mut core::ffi::c_void,
            ) -> windows_core::HRESULT,
            pub EndOnDataLoss: unsafe extern "system" fn(
                *mut core::ffi::c_void,
                *mut core::ffi::c_void,
                *mut u8,
            ) -> windows_core::HRESULT,
        }
        pub const Add: NotifyStoreChangeCallbackMask = NotifyStoreChangeCallbackMask(1u32);
        pub const Backup_Option_Full: Backup_Option = Backup_Option(1u32);
        pub const Backup_Option_Incremental: Backup_Option = Backup_Option(2u32);
        pub const Backup_Option_Invalid: Backup_Option = Backup_Option(0u32);
        pub const BatchAcknowledgementInterval: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(2u64);
        pub const CheckpointThreshold: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(1048576u64);
        pub const Clear: NotifyStoreChangeCallbackMask = NotifyStoreChangeCallbackMask(8u32);
        pub const InitialCopyQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(8u64);
        pub const InitialPrimaryReplicationQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(256u64);
        pub const InitialSecondaryReplicationQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(2048u64);
        pub const MaxAccumulatedBackupLogSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(2097152u64);
        pub const MaxCopyQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(16u64);
        pub const MaxMetadataSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(131072u64);
        pub const MaxPrimaryReplicationQueueMemorySize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(1024u64);
        pub const MaxPrimaryReplicationQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(512u64);
        pub const MaxRecordSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(262144u64);
        pub const MaxReplicationMessageSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(128u64);
        pub const MaxSecondaryReplicationQueueMemorySize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(8192u64);
        pub const MaxSecondaryReplicationQueueSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(4096u64);
        pub const MaxStreamSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(65536u64);
        pub const MaxWriteQueueDepth: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(524288u64);
        pub const MinLogSize: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(33554432u64);
        pub const None: TxnReplicator_Settings_Flags = TxnReplicator_Settings_Flags(0u64);
        pub const OptimizeForLocalSSD: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(4194304u64);
        pub const OptimizeLogForLowerDiskUsage: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(8388608u64);
        pub const RELIABLECOLLECTION_API_VERSION: u32 = 256u32;
        pub const Rebuild: NotifyStoreChangeCallbackMask = NotifyStoreChangeCallbackMask(16u32);
        pub const Remove: NotifyStoreChangeCallbackMask = NotifyStoreChangeCallbackMask(4u32);
        pub const ReplicatorAddress: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(4u64);
        pub const ReplicatorListenAddress: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(16384u64);
        pub const ReplicatorPublishAddress: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(32768u64);
        pub const Restore_Policy_Invalid: Restore_Policy = Restore_Policy(0u32);
        pub const Restore_Policy_Safe: Restore_Policy = Restore_Policy(1u32);
        pub const Restore_policy_Force: Restore_Policy = Restore_Policy(2u32);
        pub const RetryInterval: TxnReplicator_Settings_Flags = TxnReplicator_Settings_Flags(1u64);
        pub const SecondaryClearAcknowledgedOperations: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(64u64);
        pub const SecurityCredentials: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(32u64);
        pub const SharedLogId: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(268435456u64);
        pub const SharedLogPath: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(536870912u64);
        pub const SlowApiMonitoringDuration: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(16777216u64);
        pub const StateManagerChangeKind_Add: StateManagerChangeKind = StateManagerChangeKind(0u32);
        pub const StateManagerChangeKind_Rebuild: StateManagerChangeKind =
            StateManagerChangeKind(2u32);
        pub const StateManagerChangeKind_Remove: StateManagerChangeKind =
            StateManagerChangeKind(1u32);
        pub const StateProvider_Info_V1_Size: u32 = 16u32;
        pub const StateProvider_Kind_ConcurrentQueue: StateProvider_Kind = StateProvider_Kind(2u32);
        pub const StateProvider_Kind_Invalid: StateProvider_Kind = StateProvider_Kind(0u32);
        pub const StateProvider_Kind_ReliableDictionary_Compat: StateProvider_Kind =
            StateProvider_Kind(3u32);
        pub const StateProvider_Kind_Store: StateProvider_Kind = StateProvider_Kind(1u32);
        pub const StoreChangeKind_Add: StoreChangeKind = StoreChangeKind(0u32);
        pub const StoreChangeKind_Clear: StoreChangeKind = StoreChangeKind(3u32);
        pub const StoreChangeKind_Rebuild: StoreChangeKind = StoreChangeKind(4u32);
        pub const StoreChangeKind_Remove: StoreChangeKind = StoreChangeKind(2u32);
        pub const StoreChangeKind_Update: StoreChangeKind = StoreChangeKind(1u32);
        pub const Store_LockMode_Exclusive: Store_LockMode = Store_LockMode(2u32);
        pub const Store_LockMode_Free: Store_LockMode = Store_LockMode(0u32);
        pub const Store_LockMode_Shared: Store_LockMode = Store_LockMode(1u32);
        pub const Store_LockMode_Update: Store_LockMode = Store_LockMode(3u32);
        pub const ThrottlingThresholdFactor: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(134217728u64);
        pub const TransactionChangeKind_Commit: TransactionChangeKind = TransactionChangeKind(0u32);
        pub const TruncationThresholdFactor: TxnReplicator_Settings_Flags =
            TxnReplicator_Settings_Flags(67108864u64);
        pub const Update: NotifyStoreChangeCallbackMask = NotifyStoreChangeCallbackMask(2u32);
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct Backup_Option(pub u32);
        impl windows_core::TypeKind for Backup_Option {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for Backup_Option {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("Backup_Option").field(&self.0).finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct NotifyStoreChangeCallbackMask(pub u32);
        impl windows_core::TypeKind for NotifyStoreChangeCallbackMask {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for NotifyStoreChangeCallbackMask {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("NotifyStoreChangeCallbackMask")
                    .field(&self.0)
                    .finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct Restore_Policy(pub u32);
        impl windows_core::TypeKind for Restore_Policy {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for Restore_Policy {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("Restore_Policy").field(&self.0).finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct StateManagerChangeKind(pub u32);
        impl windows_core::TypeKind for StateManagerChangeKind {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for StateManagerChangeKind {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("StateManagerChangeKind")
                    .field(&self.0)
                    .finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct StateProvider_Kind(pub u32);
        impl windows_core::TypeKind for StateProvider_Kind {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for StateProvider_Kind {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("StateProvider_Kind").field(&self.0).finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct StoreChangeKind(pub u32);
        impl windows_core::TypeKind for StoreChangeKind {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for StoreChangeKind {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("StoreChangeKind").field(&self.0).finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct Store_LockMode(pub u32);
        impl windows_core::TypeKind for Store_LockMode {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for Store_LockMode {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("Store_LockMode").field(&self.0).finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct TransactionChangeKind(pub u32);
        impl windows_core::TypeKind for TransactionChangeKind {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for TransactionChangeKind {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("TransactionChangeKind")
                    .field(&self.0)
                    .finish()
            }
        }
        #[repr(transparent)]
        #[derive(PartialEq, Eq, Copy, Clone, Default)]
        pub struct TxnReplicator_Settings_Flags(pub u64);
        impl windows_core::TypeKind for TxnReplicator_Settings_Flags {
            type TypeKind = windows_core::CopyType;
        }
        impl core::fmt::Debug for TxnReplicator_Settings_Flags {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                f.debug_tuple("TxnReplicator_Settings_Flags")
                    .field(&self.0)
                    .finish()
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Backup_Info {
            pub backupId: windows_core::GUID,
            pub directoryPath: windows_core::PCWSTR,
            pub option: Backup_Option,
            pub version: Backup_Version,
        }
        impl windows_core::TypeKind for Backup_Info {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Backup_Info {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Backup_Info2 {
            pub Size: u32,
            pub backupId: windows_core::GUID,
            pub directoryPath: windows_core::PCWSTR,
            pub option: Backup_Option,
            pub version: Backup_Version,
            pub startVersion: Backup_Version,
            pub parentbackupId: windows_core::GUID,
        }
        impl windows_core::TypeKind for Backup_Info2 {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Backup_Info2 {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Backup_Version {
            pub epoch: Epoch,
            pub lsn: i64,
        }
        impl windows_core::TypeKind for Backup_Version {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Backup_Version {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Buffer {
            pub Bytes: windows_core::PSTR,
            pub Length: u32,
            pub Handle: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for Buffer {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Buffer {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Epoch {
            pub DataLossNumber: i64,
            pub ConfigurationNumber: i64,
            pub Reserved: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for Epoch {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Epoch {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StateManagerChangeData_Rebuild {
            pub StateProviders: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for StateManagerChangeData_Rebuild {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StateManagerChangeData_Rebuild {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StateManagerChangeData_SingleEntityChanged {
            pub Transaction: *mut core::ffi::c_void,
            pub StateProvider: *mut core::ffi::c_void,
            pub StateProviderName: windows_core::PCWSTR,
        }
        impl windows_core::TypeKind for StateManagerChangeData_SingleEntityChanged {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StateManagerChangeData_SingleEntityChanged {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StateProvider_Info {
            pub Size: u32,
            pub Kind: StateProvider_Kind,
            pub LangMetadata: windows_core::PCWSTR,
        }
        impl windows_core::TypeKind for StateProvider_Info {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StateProvider_Info {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StoreChangeData_Add {
            pub CommitSequnceNumber: i64,
            pub Transaction: *mut core::ffi::c_void,
            pub Key: windows_core::PCWSTR,
            pub Value: windows_core::PSTR,
            pub Length: u32,
        }
        impl windows_core::TypeKind for StoreChangeData_Add {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StoreChangeData_Add {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug)]
        pub struct StoreChangeData_Rebuild {
            pub Enumerator: *mut core::ffi::c_void,
            pub Callback: fnAsyncCompletionCallback,
            pub Context: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for StoreChangeData_Rebuild {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StoreChangeData_Rebuild {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StoreChangeData_Remove {
            pub CommitSequnceNumber: i64,
            pub Transaction: *mut core::ffi::c_void,
            pub Key: windows_core::PCWSTR,
        }
        impl windows_core::TypeKind for StoreChangeData_Remove {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StoreChangeData_Remove {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct StoreChangeData_Update {
            pub CommitSequnceNumber: i64,
            pub Transaction: *mut core::ffi::c_void,
            pub Key: windows_core::PCWSTR,
            pub Value: windows_core::PSTR,
            pub Length: u32,
        }
        impl windows_core::TypeKind for StoreChangeData_Update {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for StoreChangeData_Update {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct TransactionChangeData_Commit {
            pub Transaction: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for TransactionChangeData_Commit {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for TransactionChangeData_Commit {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct Transaction_Info {
            pub Size: u32,
            pub CommitSequenceNumber: i64,
            pub Id: i64,
        }
        impl windows_core::TypeKind for Transaction_Info {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for Transaction_Info {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct TxnReplicator_Info {
            pub Size: u32,
            pub LastStableSequenceNumber: i64,
            pub LastCommittedSequenceNumber: i64,
            pub CurrentEpoch: Epoch,
        }
        impl windows_core::TypeKind for TxnReplicator_Info {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for TxnReplicator_Info {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        #[repr(C)]
        #[derive(Clone, Copy, Debug, Eq, PartialEq)]
        pub struct TxnReplicator_Settings {
            pub Flags: u64,
            pub RetryIntervalMilliseconds: u32,
            pub BatchAcknowledgementIntervalMilliseconds: u32,
            pub ReplicatorAddress: *mut core::ffi::c_void,
            pub InitialCopyQueueSize: u32,
            pub MaxCopyQueueSize: u32,
            pub SecurityCredentials: *mut core::ffi::c_void,
            pub SecondaryClearAcknowledgedOperations: windows::Win32::Foundation::BOOL,
            pub MaxReplicationMessageSize: u32,
            pub InitialPrimaryReplicationQueueSize: u32,
            pub MaxPrimaryReplicationQueueSize: u32,
            pub MaxPrimaryReplicationQueueMemorySize: u32,
            pub InitialSecondaryReplicationQueueSize: u32,
            pub MaxSecondaryReplicationQueueSize: u32,
            pub MaxSecondaryReplicationQueueMemorySize: u32,
            pub ReplicatorListenAddress: *mut core::ffi::c_void,
            pub ReplicatorPublishAddress: *mut core::ffi::c_void,
            pub MaxStreamSizeInMB: u32,
            pub MaxMetadataSizeInKB: u32,
            pub MaxRecordSizeInKB: u32,
            pub MaxWriteQueueDepthInKB: u32,
            pub CheckpointThresholdInMB: u32,
            pub MaxAccumulatedBackupLogSizeInMB: u32,
            pub OptimizeForLocalSSD: windows::Win32::Foundation::BOOL,
            pub OptimizeLogForLowerDiskUsage: windows::Win32::Foundation::BOOL,
            pub SlowApiMonitoringDurationSeconds: u32,
            pub MinLogSizeInMB: u32,
            pub TruncationThresholdFactor: u32,
            pub ThrottlingThresholdFactor: u32,
            pub SharedLogId: *mut core::ffi::c_void,
            pub SharedLogPath: *mut core::ffi::c_void,
        }
        impl windows_core::TypeKind for TxnReplicator_Settings {
            type TypeKind = windows_core::CopyType;
        }
        impl Default for TxnReplicator_Settings {
            fn default() -> Self {
                unsafe { core::mem::zeroed() }
            }
        }
        pub type fnAsyncCompletionCallback =
            Option<unsafe extern "system" fn(ctx: *mut core::ffi::c_void)>;
        pub type fnCleanupContextCallback =
            Option<unsafe extern "system" fn(ctx: *mut core::ffi::c_void)>;
        pub type fnNotifyAsyncCompletion = Option<
            unsafe extern "system" fn(ctx: *mut core::ffi::c_void, status: windows_core::HRESULT),
        >;
        pub type fnNotifyContainsKeyAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                found: windows::Win32::Foundation::BOOL,
            ),
        >;
        pub type fnNotifyCreateEnumeratorAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                enumerator: *mut core::ffi::c_void,
            ),
        >;
        pub type fnNotifyCreateKeyEnumeratorAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                enumerator: *mut core::ffi::c_void,
            ),
        >;
        pub type fnNotifyGetAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                r: windows::Win32::Foundation::BOOL,
                objecthandle: usize,
                bytes: *mut core::ffi::c_void,
                byteslength: u32,
                versionsequencenumber: i64,
            ),
        >;
        pub type fnNotifyGetOrAddStateProviderAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                store: *mut core::ffi::c_void,
                exist: windows::Win32::Foundation::BOOL,
            ),
        >;
        pub type fnNotifyGetVisibilitySequenceNumberCompletion = Option<
            unsafe extern "system" fn(
                ctx: *const core::ffi::c_void,
                status: windows_core::HRESULT,
                vsn: i64,
            ),
        >;
        pub type fnNotifyRemoveAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                removed: windows::Win32::Foundation::BOOL,
            ),
        >;
        pub type fnNotifyStateManagerChangeCallback = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                txnreplicator: *mut core::ffi::c_void,
                changekind: StateManagerChangeKind,
                pdata: *mut core::ffi::c_void,
            ),
        >;
        pub type fnNotifyStoreChangeCallback = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                stateprovider: *mut core::ffi::c_void,
                storechangekind: StoreChangeKind,
                pdata: *mut core::ffi::c_void,
            ),
        >;
        pub type fnNotifyStoreKeyValueEnumeratorMoveNextAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                advanced: windows::Win32::Foundation::BOOL,
                key: windows_core::PCWSTR,
                objecthandle: usize,
                bytebuffer: *mut core::ffi::c_void,
                bufferlength: u32,
                versionsequencenumber: i64,
            ),
        >;
        pub type fnNotifyTransactionChangeCallback = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                txnreplicator: *mut core::ffi::c_void,
                changekind: TransactionChangeKind,
                pdata: *mut core::ffi::c_void,
            ),
        >;
        pub type fnNotifyTryDequeueAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                succeeded: windows::Win32::Foundation::BOOL,
                objecthandle: usize,
                bytes: *mut core::ffi::c_void,
                byteslength: u32,
            ),
        >;
        pub type fnNotifyUpdateAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                status: windows_core::HRESULT,
                updated: windows::Win32::Foundation::BOOL,
            ),
        >;
        pub type fnNotifyUploadAsyncCompletion = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                uploaded: windows::Win32::Foundation::BOOL,
            ),
        >;
        pub type fnUploadAsync = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                backup_info: Backup_Info,
                uploadcallbackend: fnNotifyUploadAsyncCompletion,
                uploadasynccompletionctx: *mut core::ffi::c_void,
            ),
        >;
        pub type fnUploadAsync2 = Option<
            unsafe extern "system" fn(
                ctx: *mut core::ffi::c_void,
                backup_info: *mut Backup_Info2,
                size_backup_info: u32,
                uploadcallbackend: fnNotifyUploadAsyncCompletion,
                uploadasynccompletionctx: *mut core::ffi::c_void,
            ),
        >;
        pub trait IFabricDataLossHandler_Impl: Sized {
            fn BeginOnDataLoss(
                &self,
                callback: *mut core::ffi::c_void,
                context: *mut *mut core::ffi::c_void,
            ) -> windows_core::Result<()>;
            fn EndOnDataLoss(
                &self,
                context: *mut core::ffi::c_void,
                isstatechanged: *mut u8,
            ) -> windows_core::Result<()>;
        }
        impl windows_core::RuntimeName for IFabricDataLossHandler {}
        impl IFabricDataLossHandler_Vtbl {
            pub const fn new<
                Identity: windows_core::IUnknownImpl<Impl = Impl>,
                Impl: IFabricDataLossHandler_Impl,
                const OFFSET: isize,
            >() -> IFabricDataLossHandler_Vtbl {
                unsafe extern "system" fn BeginOnDataLoss<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IFabricDataLossHandler_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    callback: *mut core::ffi::c_void,
                    context: *mut *mut core::ffi::c_void,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    IFabricDataLossHandler_Impl::BeginOnDataLoss(
                        this,
                        core::mem::transmute_copy(&callback),
                        core::mem::transmute_copy(&context),
                    )
                    .into()
                }
                unsafe extern "system" fn EndOnDataLoss<
                    Identity: windows_core::IUnknownImpl<Impl = Impl>,
                    Impl: IFabricDataLossHandler_Impl,
                    const OFFSET: isize,
                >(
                    this: *mut core::ffi::c_void,
                    context: *mut core::ffi::c_void,
                    isstatechanged: *mut u8,
                ) -> windows_core::HRESULT {
                    let this = (this as *const *const ()).offset(OFFSET) as *const Identity;
                    let this = (*this).get_impl();
                    IFabricDataLossHandler_Impl::EndOnDataLoss(
                        this,
                        core::mem::transmute_copy(&context),
                        core::mem::transmute_copy(&isstatechanged),
                    )
                    .into()
                }
                Self {
                    base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
                    BeginOnDataLoss: BeginOnDataLoss::<Identity, Impl, OFFSET>,
                    EndOnDataLoss: EndOnDataLoss::<Identity, Impl, OFFSET>,
                }
            }
            pub fn matches(iid: &windows_core::GUID) -> bool {
                iid == &<IFabricDataLossHandler as windows_core::Interface>::IID
            }
        }
    }
}
